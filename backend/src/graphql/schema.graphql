#### import * from '.graphql'

scalar Date
scalar DateTime

input LimitInput {
  first: Int!
  after: Int
}

type Query {
  cinema(id: Int!): Cinema
  cinemas(limit: LimitInput): [Cinema!]!

  actor(id: Int!): Actor
  actors(limit: LimitInput): [Actor!]!

  director(id: Int!): Director
  directors(limit: LimitInput): [Director!]!

  genre(id: Int!): Genre
  genres(limit: LimitInput): [Genre!]!

  film(id: Int!): Film
  films(limit: LimitInput): [Film!]!

  #  tag(id: Int!): Tag
  #  tags(limit: LimitInput): [Tag!]!

  studio(id: Int!): Studio
  studios(limit: LimitInput): [Studio!]!

  room(id: Int!): Room
  rooms(limit: LimitInput): [Room!]!
  cinemaRooms(idCinema: Int!): [Room!]

  #  projectionType(id: Int!): ProjectionType
  #  projectionTypes(limit: LimitInput): [ProjectionType!]!

  projection(id: Int!): Projection
  projections(limit: LimitInput): [Projection!]!

  clientLogin(login: String!, password: String!): Client
  client(id: Int!): Client

  sale(id: Int!): Sale
  sales(limit: LimitInput): [Sale!]!

  ticket(id: Int!): Ticket
  tickets(limit: LimitInput): [Ticket!]
  clientTickets(idClient: Int!): [Ticket!]
  reservationTickets(idReservation: Int!): [Ticket!]
  projectionTickets(idProjection: Int!): [Ticket!]

  reservation(id: Int!): Reservation
  reservations(limit: LimitInput): [Reservation!]
  clientReservations(idClient: Int!): [Reservation!]

  state(id: Int!): State
  states(limit: LimitInput): [State!]

  job(id: Int!): Job
  jobs(limit: LimitInput): [Job!]

  workerLogin(login: String!, password: String!): Worker
  worker(id: Int!): Worker
  workers(limit: LimitInput): [Worker!]
  cinemaWorker(idCinema: Int!): [Worker!]

}

type Mutation {
  createCinema(name: String!, address: String!): Boolean!
  create: MutationCreate
  update: MutationUpdate
  remove: MutationRemove
}

type MutationCreate {
  test(text: String!): String!
  cinema(input: InputCinemaCreate!): Cinema
  actor(input: InputActorCreate!): Actor
  director(input: InputDirectorCreate!): Director
  client(input: InputClientCreate!): Client
  genre(input: InputGenreCreate!): Genre
  film(input: InputFilmCreate!, add: InputFilmAddSome): Film
  projection(input: InputProjectionCreate!): Projection
  reservation(input: InputReservationCreate!, add: InputReservationAddSome): Reservation
  room(input: InputRoomCreate!): Room
  studio(input: InputStudioCreate!): Studio
  ticket(input: InputTicketCreate!): Ticket
  worker(input: InputWorkerCreate!): Worker
}
type MutationUpdate {
  cinema(input: InputCinemaUpdate): Cinema
  actor(input: InputActorUpdate): Actor
  director(input: InputDirectorUpdate): Director
  client(input: InputClientUpdate): Client
  genre(input: InputGenreUpdate): Genre
  film(input: InputFilmUpdate, add: InputFilmAddSome, remove: InputFilmRemoveSome): Film
  projection(input: InputProjectionUpdate): Projection
  reservation(input: InputReservationUpdate, add: InputReservationAddSome, remove: InputReservationRemoveSome): Reservation
  room(input: InputRoomUpdate): Room
  studio(input: InputStudioUpdate): Studio
  ticket(input: InputTicketUpdate): Ticket
  worker(input: InputWorkerUpdate): Worker
}
type MutationRemove {
  cinema(input: InputCinemaRemove!): Cinema
  actor(input: InputActorRemove!): Actor
  director(input: InputDirectorRemove!): Director
  client(input: InputClientRemove!): Client
  genre(input: InputGenreRemove!): Genre
  film(input: InputFilmRemove!): Film
  projection(input: InputProjectionRemove!): Projection
  reservation(input: InputReservationRemove!): Reservation
  room(input: InputRoomRemove!): Room
  studio(input: InputStudioRemove!): Studio
  ticket(input: InputTicketRemove!): Ticket
  worker(input: InputWorkerRemove!): Worker
}

###############################################
# Cinema
#
type Cinema {
  id: Int!
  """Nazev/Jmeno/Oznaceni kina."""
  name: String!
  """Adresa kina / Kdo se kino nachazi."""
  address: String!
  """Seznam mistnosti pro promitani."""
  rooms: [Room]
  """Url adresa obrazku"""
  img: String
}
input InputCinemaCreate {
  name: String!
  address: String!
  img: String
}
input InputCinemaUpdate {
  id: Int!
  name: String
  address: String
  img: String
}
input InputCinemaRemove {
  id: Int!
}

###############################################
# Actor
#
type Actor {
  id: Int!
  firstname: String!
  lastname: String!
  """Datum narozeni."""
  birthday: Date
  films: [Film]
}
input InputActorCreate {
  firstname: String!
  lastname: String!
  birthday: Date
}
input InputActorUpdate {
  id: Int!
  firstname: String
  lastname: String
  birthday: Date
}
input InputActorRemove {
  id: Int!
}


###############################################
# Director
#
type Director {
  id: Int!
  firstname: String!
  lastname: String!
  """Datum narozeni."""
  birthday: Date
}
input InputDirectorCreate {
  firstname: String!
  lastname: String!
  birthday: Date
}
input InputDirectorUpdate {
  id: Int!
  firstname: String
  lastname: String
  birthday: Date
}
input InputDirectorRemove {
  id: Int!
}


###############################################
# Film
#
type Film {
  id: Int!
  name: String!
  duration: Int
  premiere: Date
  rating: Float

  director: Director
  studio: Studio
  actors: [Actor]
  genres: [Genre]
}

input InputFilmCreate {
  name: String!
  duration: Int
  premiere: Date
  rating: Float
  idDirector: Int
  idStudio: Int
}
input InputFilmUpdate {
  id: Int!
  duration: Int
  premiere: Date
  rating: Float
  idDirector: Int
  idStudio: Int
}
input InputFilmRemove {
  id: Int!
}
input InputFilmAddSome {
  id: Int!
  idsActor: [Int!]
  idsGenre: [Int!]
}
input InputFilmRemoveSome {
  id: Int!
  idsActor: [Int!]
  idsGenre: [Int!]
}

###############################################
# Genre
#
type Genre {
  id: Int!
  name: String!
}
input InputGenreCreate {
  name: String!
}
input InputGenreUpdate {
  id: Int!
  name: String
}
input InputGenreRemove {
  id: Int!
}


###############################################
# Projection
#
type Projection {
  id: Int!
  #datetime: String!
  datetime: DateTime!
  price: Int!

  room: Room
  film: Film
}
input InputProjectionCreate {
  datetime: Date!
  price: Int!
  idRoom: Int!
  idFilm: Int!
}
input InputProjectionUpdate {
  id: Int!
  datetime: Date!
  price: Int!
  idRoom: Int!
  idFilm: Int!
}
input InputProjectionRemove {
  id: Int!
}

###############################################
# Room
#
type Room {
  id: Int!
  name: String!
  capacity: Int!
  cinema: Cinema!
}
input InputRoomCreate {
  name: String!
  capacity: Int!
  idCinema: Int!
}
input InputRoomUpdate {
  id: Int!
  name: String
  capacity: Int
  idCinema: Int
}
input InputRoomRemove {
  id: Int!
}


###############################################
# Studio
#
type Studio {
  id: Int!
  name: String!
}
input InputStudioCreate {
  name: String!
}
input InputStudioUpdate {
  id: Int!
  name: String
}
input InputStudioRemove {
  id: Int!
}

###############################################
# Sale
#
type Sale {
  id: Int!
  price: Int
  precentage: Float
  description: String
}


###############################################
# Client
#
type Client {
  id: Int!
  firstname: String!
  lastname: String!
  login: String!
  birthday: Date

  reservations: [Reservation]
  tickets: [Ticket]
}
input InputClientCreate {
  firstname: String!
  lastname: String!
  login: String!
  password: String!
  birthday: Date
}
input InputClientUpdate {
  id: Int!
  firstname: String!
  lastname: String!
  login: String!
  birthday: Date
}
input InputClientRemove {
  id: Int!
}
input InputClientUpdatePassword {
  id: Int!
  oldPassword: String!
  newPassword: String!
}

###############################################
# State
#
type State {
  id: Int!
  name: String!
}
input InputStateCreate {
  name: String!
}
input InputStateUpdate {
  id: Int!
  name: String
}
input InputStateRemove {
  id: Int!
}

###############################################
# Reservation
#
type Reservation {
  id: Int!
  code: String!
  registrated: DateTime!
  client: Client!

  state: State
  tickets: [Ticket]
}
input InputReservationCreate {
  code: String
  registrated: Date
  idClient: Int
}
input InputReservationUpdate {
  id: Int!
  registrated: Date
  idClient: Int
  idSale: Int
}
input InputReservationRemove {
  id: Int!
}
# Pridani listku k rezervaci
input InputReservationAddSome {
  id: Int!
  idsTicket: [Int!]
}
# Odebrani listku z rezervace
input InputReservationRemoveSome {
  id: Int!
  idsTicket: [Int!]
}

###############################################
# Ticket
#
type Ticket {
  id: Int!
  seat: Int!
  # Neni reservace zatim
  reservation: Reservation
  projection: Projection
  # Kdo si listek koupil
  buyer: Client
  sale: Sale
}
input InputTicketCreate {
  seat: Int!
  idProjection: Int!
  idReservation: Int
  idClient: Int
  idSale: Int
}
input InputTicketUpdate {
  id: Int!
  seat: Int
  idProjection: Int
  idReservation: Int
  idClient: Int
  idSale: Int
}
input InputTicketRemove {
  id: Int!
}


###############################################
# Job
#
type Job {
  id: Int!
  name: String!
}
input InputJobCreate {
  name: String!
}
input InputJobUpdate {
  id: Int!
  name: String
}
input InputJobRemove {
  id: Int!
}

###############################################
# Worker
#
type Worker {
  id: Int!
  firstname: String!
  lastname: String!
  login: String!
  salary: Int!
  job: Job!

  cinema: Cinema
}
input InputWorkerCreate {
  firstname: String!
  lastname: String!
  login: String!
  salary: Int!
  idJob: Int!
  idCinema: Int
  password: String!
}
input InputWorkerUpdate {
  id: Int!
  firstname: String
  lastname: String
  login: String
  salary: Int
  idJob: Int
  idCinema: Int
}
input InputWorkerRemove {
  id: Int!
}
input InputWorkerUpdatePassword {
  id: Int!
  newPassword: String!
  oldPassword: String!
}
